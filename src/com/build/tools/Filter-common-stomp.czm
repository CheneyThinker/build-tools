package com.%package%.filter;

import com.%package%.config.%project%YMLConfig;
import com.%package%.core.ResponseGenerator;
import com.%package%.exception.%project%Exception;
import com.%package%.utils.BroadcastUtils;
import com.%package%.utils.%project%Utils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;

import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Map;

/**
 * @description
 * @author %author%
 * @date %date%
 */
@WebFilter({
    "/%project%/index",
    "/%project%/refresh%project%",
    "/%project%/reload%project%"
})
public class %project%Filter implements Filter {

  @Autowired
  private RestTemplate restTemplate;
  @Autowired
  private %project%YMLConfig %small%YMLConfig;
  @Autowired
  private SimpMessagingTemplate simpMessagingTemplate;
  private Logger logger = LoggerFactory.getLogger(%project%Filter.class);

  public void init(FilterConfig filterConfig) {
  }

  public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) {
    HttpServletRequest request = (HttpServletRequest) servletRequest;
    HttpServletResponse response = (HttpServletResponse) servletResponse;
    response.setHeader("Access-Control-Allow-Origin", "*");
    response.setCharacterEncoding("UTF-8");
    response.setContentType("application/json; charset=UTF-8");
    try {
      String parameter = request.getParameter("data");
      logger.error(parameter);
      Map<String, Object> map = %project%Utils.getMap(parameter);
      if (map.containsKey("authToken") && map.containsKey("systemId")) {
        String authToken = (String) map.remove("authToken");
        String systemId = (String) map.remove("systemId");
      }
      request.setAttribute("data", map);
      %project%Utils.installRestTemplate(restTemplate);
      %project%Utils.install%project%YMLConfig(%small%YMLConfig);
      BroadcastUtils.installSimpMessagingTemplate(simpMessagingTemplate);
      filterChain.doFilter(request, response);
    } catch (Exception e) {
      ServletOutputStream out = null;
      try {
        out = response.getOutputStream();
        out.write(%project%Utils.toJson(ResponseGenerator.genNo(new %project%Exception(e.getMessage()))).getBytes("UTF-8"));
        out.flush();
      } catch (IOException ex) {
        ex.printStackTrace();
      } finally {
        if (!StringUtils.isEmpty(out)) {
          try {
            out.close();
          } catch (IOException exe) {
            exe.printStackTrace();
          }
        }
      }
    }
  }

  public void destroy() {
  }

}